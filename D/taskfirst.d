// 0.0  Написать процедуру тестирующую все следующие функции, и выводящую отчёт.
//Разобраться с Unit Tests.
import std.stdio;
import std.algorithm;

void main() {
    writeln("max2(3, 2) is ", max2(3, 2));
    assert(max2(1, 2) == 2);
    assert(max3(1, 2, 3) == 3);
    writeln("sum([1..5])", sumArray([1,2,3,4,5]));
    auto test_array = createABarray(2, 8);
    writefln("avg of %s is %f", test_array, avgArray(test_array));
    writeln("len of abc is ", lenString("abc"));

    writeln("end.");
}
/* Функцию создания массива от a до b */
int[] createABarray(int a, int b) {
    int arr[] = new int[b - a];
    int index = 0;
    foreach (x; a..b) {
        arr[index++] = x;
    }
    return arr;
}

/*  Написать функцию max2 возвращающую большее из двух чисел. */
int max2(int a, int b) {
    return a > b ? a : b;
}
//2.1  Написать функцию max3 принимающую 3 числа и возвращающую максимальное.
int max3(int a, int b, int c) {
    if (a > b && a > c) return a;
    return max2(a, max2(b, c));
}
//1.0  написать функцию sumArray принимающую массив целых чисел и вычисляющих сумму.
int sumArray(int a[]) {
    int sum = 0;
    foreach (x; a) {
        sum += x;
    }
    return sum;
}
//1.1  написать функцию avgArray принимающую массив целых чисел и вычисляющих среднее арифметическое.
double avgArray(int a[]) {
    long sum = reduce!((a, b) => a + b)(0, a);
    return sum / a.length;
}
//1.2  написать функцию lenString вычисляющую длинну переданной строки.
uint lenString(string s) {
    if (s != "") {
        return 1 + lenString(s[1..$]);
    }
    return 0;
}
//2.2  Написать функцию sortArray принимающую массив чисел и сортирующую его
//2.3  Написать функцию maxArray принимающую массив целых чисел и находящую максимальное значение.
//2.4  Написать функцию is_member проверяющая встречается ли строка в массиве строк.
//2.5  Написать функцию overlapping принимающую два массива и возвращую True если у массивов есть хотя бы один общий элемент. можно использовать is_member.
//3.0  написать функцию принимающую два массива целых чисел и возвращающую массив разности элементов. Result = X - Y
//3.1  написать функцию принимающую массив целых чисел и целое число, и вычисляющих сумму элементов меньших переданного числа.
//4.0  написать функцию isInRectangle принимающую 4 целых числа - декартовы координаты углов прямоугольника и два числа - координаты точки. функция должна определять находится ли точка внутри прямоугольника.
//4.1  написать функцию greaterThan принимающую массив целых чисел и число, возвращающую массив чисел превыщающих переданное. (смотри про динамические массивы)
//5.0  написать функцию isVowel проверяющая символ на гласный(True)\согласный(False)
//5.1  написать функцию is_palindrome проверяющая строку на палиндром, вида "радар"
//5.2  написать функцию reverseString переворачивающую строку. 'abcd' -> 'dcba'
//5.3  написать функцию stringToNumber для преобразования строки содержащую десятичное число в число integer. строка состоит из символов, подобна массиву из char. каждый char это код символа в кодировке. коды цифр - 48 = '0'  можно использовать функции ORD CHR, смотрим справку, ищем примеры. CHR(50) == '2', ORD('3')==51
//5.4  написать функцию numberToString преобразования числа в строку.
//5.5  Написать функцию strCmpGT принимающую две строки и возвращающую True если первая больше второй.(сравнивая в лексикографическом порядке) Например:  ab > aa    aba < ca    aba < z    abc < abca
//5.6  Напсать функцию sortStringArray сортирующую массив строк в лексикографическом порядке, пользуясь функцией strCmpGT.
//6.0  написать функцию fileStringChange для замены в файле заданной строку на другую заданную.
//6.1  написать функцию fileStringReverse для переворачивания файла построчно, с конца в начало и обращающую и каждую строку функцией reverseString.
//7.0  написать функцию вычисляющую факториал числа не используя циклы. 
//7.1  написать функцию суммирующую массив чисел не используя циклы.
//7.2  написать функцию перемножающую массив чисел не используя циклы.
//8.0  написать функцию принимающую матрицу(двумерный массив) символов и два символа и заполняющую первыми символами диагонали, а вторыми символами элементы с обоими чётными индексами.
//8.1  написать процедуру печатающую матрицу символов, поэлементно, без пробелов, каждый ряд новой строки.
//8.2 Напиши функцию которая преобразует массив слов в массив чисел представляющих длинну каждого слова.
//8.3 Напиши функцию find_longest_word которая принимает массив слов и возвращает длинну самого длинного.
//8.4 Напиши функцию filter_long_words которая принимает массив слов и целое число N, и возвращает массив слов длинны больше N.
// Выделить это в модуль.

//2.0  Написать функцию maxt возвращающую большее из массива элементов(обобщённо).
// задачи на структуры\классы. на коллекции, исключения..
