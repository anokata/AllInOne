список всех городов мира
Запрос по списку городов и вывод рядом температуры
+Запрос основных городов
+сделать список главных городов
+Раскрасить страны
+ вывести подсказкой
+поле ввода города с подсказкой 
+Убирать подсказки через 5 сек
+Выводить больше инфы
+Выбирать город при вводе сразу 
+Подставлять имя города в поле ввода при наведении на точку
+Добавить реки
+перевести на Post получение погоды
+Синхронизировать списки городов и точек
+сделать точки более наводимыми
+Показывать выбранный город на карте
+в любой точке, когда останавливается мышка - кратко, когда клик - подробно
+canvas 
+Выводить координаты в точках без города
+Поворачивать до выбранного города Плавно
+Подсвечивать ближний город, и выбранный
+Добавить больше городов россии и курортов и синкнуть в список координат и имён
+towns -> features -> draw
+Генерить список городов при загрузке towns.keys()
+additional towns from town.json make keys
+выводить иконками условия, ветер.
+Масштабирование более плавное и быстрое, и не линейное, чем ближе тем быстрее
+выводить названия городов около точек
+В зависимости от масштаба выводить названия городов мелких, погоду, названия стран.
    В зависимости от zoom LABELRANK выводить название страны в path.centroid 
    POP_RANK labelrank megacity worldcity scalerank
    Загрузить все города
* 31.05.2019
+подписи выше
+перенести поиск
+Т воды
+погода по широте
+точки от зума увеличивать
+минимальный зум ограничить
+меньше городов при зуме
+Зум нелинейно
+увеличение шрифта страны от зума
+null
+Города для поиска генерить из новых и их коорд city_coords
+Сгруппировать страны по цвету и рисовать блоками по одному цвету
+Чувствительность поворота мышкой от зума уменьшать
?профилирование
+ув индекс
!?+асинк
+полярный день - нет долготы и подпись что полярный

    ОТРЕндерить глобус весь в картинку png и натягивать
    Хранить кеш погоды на сервере и обновлять в фоне весь список (быстро лимит превысим)

+Выводить прогноз по частям дня
-Масштабирование на правую кнопку
-Добавить больше курортов Турцию Вьетнам
+Добавить Рыбинск 
+Взять ADM 0 имя страны города, найти страну с таким именем, подставить её рус имя в назв города в погоде
+Франция
-dadata in city, +страна
-Добавить Кипр
+Сверстать подсказку
-Переключение на растровую плоскую http://bl.ocks.org/mbostock/4132797
+Учёт часового пояса
+Для координатной точки искать ближайший город и брать его регион. CONTINENT у страны. TIMEZONE у города
-Сред детализации границы
?Побережья
+Сокращения названий стран

Зум плавнее 
https://humanwhocodes.com/blog/2011/05/03/better-javascript-animations-with-requestanimationframe/

 Удалить дубликаты
Очищать круг вместо прямоуг

Отсекать страны и реки которые при зуме не входят

атмосфера
Увеличивать с поворотом туда где указатель
Выводить инфу для двух городов?

Рефакторинг
Комментарии, объяснения
Порядок функций
Выделение функций
Схема объяснение от главных фун

Сделать elenalobanova.pythonanywhere.com

+Коменты сервера и рефактор
+Оставлять вкл 5/10
+ ** Math.pow

# При запросе если кеш старый. пройтись по списку городов и обновить кеш # дооолго. надо в фоне. потоком.

+Подписывать страну у города в автодополнении
    https://api.jqueryui.com/autocomplete/#option-source
    Хранить label:value = Город(стран)
    При выборе парсить value и искать город с учётом страны(страну в код страны)
+Текущее время с учётом часового пояса
+created time linux python сохранять время создания кеша в нём
+unction country_for_city(city) { По словарику 

+хинт скрыв вне карты
+вс и сб
+очищать город если выбран
+удалить коментированое
+Чехия Конго
+а сделай города помельче
+и названия стран покрупнее и беленьким
Очистить от лишнего. 
Сантьяго (Чили) - уезжает ВС

https://api.jqueryui.com/autocomplete/#option-minLength
https://www.d3-graph-gallery.com/graph/line_basic.html
https://www.d3-graph-gallery.com/graph/connectedscatter_basic.html
DADATA_KEY = "Token a21ae8d8246ebf44e4c99a8dd9e6786d3a56ca0a"
# D Подпрограмма обновления данных кеша
def refresh_cache():
    if is_old():
        wheather = {}
        with open('static/towns.json') as fin:
            towns = json.loads(fin.read())
            for town in towns:
                lat = town[0]
                lon = town[1]
                data = get_wheather_from_yandex(lat, lon)
                wheather[lat+lon] = data
        save_json(CACHE_FILE, wheather)

# D
@app.route("/suggestions/", methods=['POST'])
def suggestions(q):
    if request.method == "POST":
        q = request.form.get("q")
    headers = {
            "Content-Type": "application/json", 
            "Accept": "application/json", 
            "Authorization": DADATA_KEY}
    data = {
            "query": q, 
            "count":"10",
            "locations": [ { "country": "*" }]
            }
    data = json.dumps(data)
    r = requests.post(DADATA_URL, data=data, params=data, headers=headers)
    return r.text
DADATA_URL = "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address"

	  //var months = ['Янв','Фев','Мар','Апр','Май','Июн','Июл','Авг','Сен','Окт','Ноя','Дек'];
// Подпрограмма отображения линии побережий
function draw_coastlines() {
    var geojson = coast;
    context.strokeStyle = RIVER_COLOR;
    context.lineWidth = 1.5;
    context.beginPath();
    for (var i = 0; i < geojson.length; i++) {
        var line = geojson[i];
        geoGenerator({type: 'FeatureCollection', features: [line]})
    }
	context.stroke();
}

    //projection.rotate([-lon, -lat, rotate[2]]); // сразу
// DEL
// Функция поиска страны для города
// function country_for_city(city) {
//     // Получение административного имени страны из данных города
//     var country_name_eng = city.properties.ADM0NAME;
//     // Поиск страны с таким именем
//     for (let i = 0; i < world.features.length; i++) {
//         var country = world.features[i];
//         if (country.properties.NAME == country_name_eng) {
//             return country;
//         }
//     }
// }
